// LoQuePida - Prisma Schema (EXACT match with Supabase database)
// Updated to reflect the REAL structure shown in Supabase schema visualizer
// All the enums are provided
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================================================
// ENUMS (matching the real database enums)
// ============================================================================

enum UserRole {
  CUSTOMER
  SELLER
  ADMIN

  @@map("UserRole")
}

enum SellerStatus {
  ACTIVE
  INACTIVE
  BANNED

  @@map("SellerStatus")
}

enum ProductCondition {
  NEW
  USED
  REFURBISHED

  @@map("ProductCondition")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED

  @@map("OrderStatus")
}

enum PaymentProvider {
  STRIPE
  KUSHKI
  LOCAL

  @@map("PaymentProvider")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED

  @@map("PaymentStatus")
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
  ENTERPRISE

  @@map("SubscriptionPlan")
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  PAID
  UNPAID

  @@map("SubscriptionStatus")
}

enum BillingCycle {
  MONTHLY
  YEARLY

  @@map("BillingCycle")
}

// ============================================================================
// MODELS (using proper enums)
// ============================================================================

model User {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  firebaseUid   String    @unique @map("firebase_uid")
  email         String    @unique
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  displayName   String?   @map("display_name")
  avatar        String?
  phoneNumber   String?   @map("phone_number")
  role          UserRole  @default(CUSTOMER)
  emailVerified Boolean   @default(false) @map("email_verified")
  isActive      Boolean   @default(true) @map("is_active")
  lastSignIn    DateTime? @map("last_sign_in")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  customers Customer[]
  sellers   Seller[]

  @@map("users")
}

model Customer {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId        String    @map("user_id") @db.Uuid
  dateOfBirth   DateTime? @map("date_of_birth") @db.Date
  gender        String?
  loyaltyPoints Int       @default(0) @map("loyalty_points")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  user           User            @relation(fields: [userId], references: [id])
  addresses      Address[]
  carts          Cart[]
  orders         Order[]
  productReviews ProductReview[]

  @@map("customers")
}

model Seller {
  id                  String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId              String    @map("user_id") @db.Uuid
  businessName        String    @map("business_name")
  businessDescription String?   @map("business_description")
  businessAddress     String?   @map("business_address")
  businessPhone       String?   @map("business_phone")
  businessEmail       String?   @map("business_email")
  taxId               String?   @map("tax_id")
  logo                String?
  website             String?
  status              SellerStatus @default(ACTIVE)
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  user          User            @relation(fields: [userId], references: [id])
  products      Product[]
  warehouses    Warehouse[]
  subscriptions Subscription[]

  @@map("sellers")
}

model Category {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  image       String?
  icon        String?
  parentId    String?   @map("parent_id") @db.Uuid
  sortOrder   Int       @default(0) @map("sort_order")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String
  description      String?
  shortDescription String?   @map("short_description")
  slug             String    @unique
  sku              String    @unique
  price            Decimal   @db.Decimal(10, 2)
  comparePrice     Decimal?  @map("compare_price") @db.Decimal(10, 2)
  costPrice        Decimal?  @map("cost_price") @db.Decimal(10, 2)
  categoryId       String    @map("category_id") @db.Uuid
  sellerId         String    @map("seller_id") @db.Uuid
  condition        ProductCondition
  brand            String?
  model            String?
  weight           Decimal?  @db.Decimal(10, 2)
  dimensions       Json?     @db.JsonB
  images           String[]  @default([])
  tags             String[]  @default([])
  metaTitle        String?   @map("meta_title")
  metaDescription  String?   @map("meta_description")
  isActive         Boolean   @default(true) @map("is_active")
  isFeatured       Boolean   @default(false) @map("is_featured")
  trackQuantity    Boolean   @default(true) @map("track_quantity")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  category       Category        @relation(fields: [categoryId], references: [id])
  seller         Seller          @relation(fields: [sellerId], references: [id])
  cartItems      CartItem[]
  orderItems     OrderItem[]
  productReviews ProductReview[]
  inventory      Inventory[]

  @@map("products")
}

model Inventory {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  productId    String    @map("product_id") @db.Uuid
  warehouseId  String    @map("warehouse_id") @db.Uuid
  quantity     Int       @default(0)
  reserved     Int       @default(0)
  reorderLevel Int       @default(0) @map("reorder_level")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  product   Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])

  @@map("inventory")
}

model Cart {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customerId String    @map("customer_id") @db.Uuid
  sessionId  String?   @map("session_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relations
  customer Customer   @relation(fields: [customerId], references: [id])
  items    CartItem[]

  @@map("carts")
}

model CartItem {
  id        String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  cartId    String  @map("cart_id") @db.Uuid
  productId String  @map("product_id") @db.Uuid
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Order {
  id                  String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  orderNumber         String    @unique @map("order_number")
  customerId          String    @map("customer_id") @db.Uuid
  status              OrderStatus @default(PENDING)
  subtotal            Decimal   @db.Decimal(10, 2)
  shippingCost        Decimal   @default(0) @map("shipping_cost") @db.Decimal(10, 2)
  taxAmount           Decimal   @default(0) @map("tax_amount") @db.Decimal(10, 2)
  totalAmount         Decimal   @map("total_amount") @db.Decimal(10, 2)
  shippingAddressId   String    @map("shipping_address_id") @db.Uuid
  billingAddressId    String?   @map("billing_address_id") @db.Uuid
  notes               String?
  trackingNumber      String?   @map("tracking_number")
  cancellationReason  String?   @map("cancellation_reason")
  shippedAt           DateTime? @map("shipped_at")
  deliveredAt         DateTime? @map("delivered_at")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  customer         Customer      @relation(fields: [customerId], references: [id])
  shippingAddress  Address       @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress   Address?      @relation("BillingAddress", fields: [billingAddressId], references: [id])
  orderItems       OrderItem[]
  payments         Payment[]
  shippingInfo     ShippingInfo[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  orderId   String  @map("order_id") @db.Uuid
  productId String  @map("product_id") @db.Uuid
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  orderId          String    @map("order_id") @db.Uuid
  provider         PaymentProvider
  status           PaymentStatus @default(PENDING)
  amount           Decimal   @db.Decimal(10, 2)
  currency         String    @default("USD")
  transactionId    String?   @map("transaction_id")
  providerResponse Json?     @map("provider_response") @db.JsonB
  failureReason    String?   @map("failure_reason")
  paidAt           DateTime? @map("paid_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model ProductReview {
  id                   String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  productId            String   @map("product_id") @db.Uuid
  customerId           String   @map("customer_id") @db.Uuid
  rating               Int
  title                String?
  comment              String?
  images               String[] @default([])
  isVerifiedPurchase   Boolean  @default(false) @map("is_verified_purchase")
  isApproved           Boolean  @default(false) @map("is_approved")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  product  Product  @relation(fields: [productId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])

  @@map("product_reviews")
}

model Subscription {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sellerId         String    @map("seller_id") @db.Uuid
  plan             SubscriptionPlan
  billingCycle     BillingCycle @map("billing_cycle")
  status           SubscriptionStatus @default(UNPAID)
  price            Decimal   @db.Decimal(10, 2)
  startDate        DateTime  @map("start_date") @db.Date
  endDate          DateTime  @map("end_date") @db.Date
  autoRenew        Boolean   @default(true) @map("auto_renew")
  lastBillingDate  DateTime? @map("last_billing_date") @db.Date
  nextBillingDate  DateTime? @map("next_billing_date") @db.Date
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  seller Seller @relation(fields: [sellerId], references: [id])

  @@map("subscriptions")
}

model Address {
  id                   String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customerId           String    @map("customer_id") @db.Uuid
  recipientName        String    @map("recipient_name")
  streetAddress        String    @map("street_address")
  city                 String
  province             String
  country              String
  postalCode           String?   @map("postal_code")
  phoneNumber          String?   @map("phone_number")
  isDefault            Boolean   @default(false) @map("is_default")
  addressType          String?   @map("address_type")
  deliveryInstructions String?   @map("delivery_instructions")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // Relations
  customer       Customer @relation(fields: [customerId], references: [id])
  shippingOrders Order[]  @relation("ShippingAddress")
  billingOrders  Order[]  @relation("BillingAddress")

  @@map("addresses")
}

model ShippingInfo {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  orderId           String    @map("order_id") @db.Uuid
  carrier           String?
  trackingNumber    String?   @map("tracking_number")
  shippingMethod    String?   @map("shipping_method")
  estimatedDelivery DateTime? @map("estimated_delivery")
  actualDelivery    DateTime? @map("actual_delivery")
  shippingCost      Decimal   @map("shipping_cost") @db.Decimal(10, 2)
  weight            Decimal?  @db.Decimal(10, 2)
  dimensions        Json?     @db.JsonB
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  @@map("shipping_info")
}

model Warehouse {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sellerId   String    @map("seller_id") @db.Uuid
  name       String
  address    String
  city       String
  province   String
  country    String
  postalCode String?   @map("postal_code")
  phone      String?
  email      String?
  isActive   Boolean   @default(true) @map("is_active")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relations
  seller    Seller      @relation(fields: [sellerId], references: [id])
  inventory Inventory[]

  @@map("warehouses")
}
